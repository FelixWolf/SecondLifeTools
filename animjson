#!/usr/bin/env python3
import struct
import argparse
import json
import math

RAD_TO_DEG = 57.295779513082320876798154814105
DEG_TO_RAD = 0.017453292519943295769236907684886

class CustomJsonEncoder(json.JSONEncoder):
    def iterencode(self, o, _one_shot=False):
        """Encode the given object and yield each string
        representation as available.
        For example::
            for chunk in JSONEncoder().iterencode(bigobject):
                mysocket.write(chunk)
        """
        if self.check_circular:
            markers = {}
        else:
            markers = None
        if self.ensure_ascii:
            _encoder = json.encoder.encode_basestring_ascii
        else:
            _encoder = json.encoder.encode_basestring
        
        INFINITY = float("inf")
        def floatstr(o, allow_nan=False,
                _repr=float.__repr__, _inf=INFINITY, _neginf=-INFINITY):
            # Check for specials.  Note that this type of test is processor
            # and/or platform-specific, so do tests which don't depend on the
            # internals.

            if o != o:
                text = 'NaN'
            elif o == _inf:
                text = 'Infinity'
            elif o == _neginf:
                text = '-Infinity'
            else:
                return "{:f}".format(o)

            if not allow_nan:
                raise ValueError(
                    "Out of range float values are not JSON compliant: " +
                    repr(o))

            return text


        if (_one_shot and json.encoder.c_make_encoder is not None
                and self.indent is None):
            _iterencode = json.encoder.c_make_encoder(
                markers, self.default, _encoder, self.indent,
                self.key_separator, self.item_separator, self.sort_keys,
                self.skipkeys, self.allow_nan)
        else:
            _iterencode = json.encoder._make_iterencode(
                markers, self.default, _encoder, self.indent, floatstr,
                self.key_separator, self.item_separator, self.sort_keys,
                self.skipkeys, _one_shot)
        return _iterencode(o, 0)

def RotToEuler(x, y, z, w = None):
    if w == None:
        w = 1.0 - math.sqrt(x * x + y * y + z * z)
        if w > 0:
            w = math.sqrt(w)
        else:
            w = 0
    
    sx = 2 * (x * w - y * z)
    sy = 2 * (y * w + x * z)
    ys = w * w - y * y
    xz = x * x - z * z
    cx = ys - xz
    cy = math.sqrt(sx * sx + cx * cx)
    
    if cy > 0.000436:
        return (
            math.atan2(sx, cx),
            math.atan2(sy, cy),
            math.atan2(2 * (z * w - x * y), ys + xz)
        )
    
    elif sy > 0: #The jimble is funny
        return 0, math.pi / 2, 2 * math.atan2(z + x, w + y)
    
    else: #The jimble is hilarious
        return 0, -math.pi / 2, 2 * math.atan2(z - x, w - y)

def qMult(a, b):
    return (
        b[3] * a[0] + b[0] * a[3] + b[1] * a[2] - b[2] * a[1],
        b[3] * a[1] + b[1] * a[3] + b[2] * a[0] - b[0] * a[2],
        b[3] * a[2] + b[2] * a[3] + b[0] * a[1] - b[1] * a[0],
        b[3] * a[3] - b[0] * a[0] - b[1] * a[1] - b[2] * a[2]
    )

def EulerToQuat(angle, direction):
    mag = math.sqrt(
        direction[0] * direction[0]
      + direction[1] * direction[1]
      + direction[2] * direction[2]
    )
    if mag > 0.0000001:
        angle *= 0.5
        s = math.sin(angle) / mag
        return (
            direction[0] * s,
            direction[1] * s,
            direction[2] * s,
            math.cos(angle)
        )
    else:
        return (0, 0, 0, 0)

#Is this even needed?
def quantize16(e):
    x, y, z, w = (
        ((int(((e[0] + 1) / 2) * 0xFFFF)/0xFFFF) * 2) - 1,
        ((int(((e[1] + 1) / 2) * 0xFFFF)/0xFFFF) * 2) - 1,
        ((int(((e[2] + 1) / 2) * 0xFFFF)/0xFFFF) * 2) - 1,
        ((int(((e[3] + 1) / 2) * 0xFFFF)/0xFFFF) * 2) - 1
    )
    mag = math.sqrt(x * x + y * y + z * z + w * w)

    if mag > 0.0000001:
        if math.fabs(1 - mag) > 0.000001:
            m = 1/mag
            x *= m
            y *= m
            z *= m
            w *= m
    else:
        x, y, z, w = (0,0,0,1)
    
    return (x, y, z, w)

def EulerToRot(x, y, z):
    return qMult(
        qMult(
            EulerToQuat(x, (1,0,0)),
            EulerToQuat(y, (0,1,0))
        ),
        EulerToQuat(z, (0,0,1))
    )

sAnimHeader = struct.Struct("<HHLf")
sAnimParams = struct.Struct("<ffLffLL")
sAnimFrame = struct.Struct("<HHHH")
sAnimUInt32 = struct.Struct("<I") #Used for various stuff
sAnimConstraint = struct.Struct("<BB16sfff16sffffffffff")

def parseAnim(data):
    result = {}
    offset = 0
    
    version, sub_version, base_priority, duration = sAnimHeader.unpack_from(data, offset)
    offset = offset + 12
    
    emote_name = ""
    while data[offset] != 0:
        emote_name = emote_name + chr(data[offset])
        offset = offset + 1
    
    offset = offset + 1
    
    loop_in_point, loop_out_point, loop, ease_in_duration, \
        ease_out_duration, hand_pose, num_joints \
        = sAnimParams.unpack_from(data, offset)
    
    offset = offset + 28
    
    result = {
        "version": version,
        "sub_version": sub_version,
        "base_priority": base_priority,
        "duration": duration,
        "emote_name": emote_name,
        "loop_in_point": loop_in_point,
        "loop_out_point": loop_out_point,
        "loop": loop,
        "ease_in_duration": ease_in_duration,
        "ease_out_duration": ease_out_duration,
        "hand_pose": hand_pose,
        "joints": [],
        "constraints": []
    }
    
    for i in range(num_joints):
        joint_name = ""
        while data[offset] != 0:
            joint_name = joint_name + chr(data[offset])
            offset = offset + 1
        
        offset = offset + 1
        
        joint_priority, = sAnimUInt32.unpack_from(data, offset)
        offset = offset + 4
        
        jointResult = {
            "name": joint_name,
            "priority": joint_priority,
            "rotation_keys": [],
            "position_keys": []
        }
        
        num_rot_keys, = sAnimUInt32.unpack_from(data, offset)
        offset = offset + 4
        for x in range(num_rot_keys):
            time, rot_x, rot_y, rot_z = sAnimFrame.unpack_from(data, offset)
            rot_x, rot_y, rot_z = RotToEuler(
                ((rot_x/0xFFFF) * 2) - 1,
                ((rot_y/0xFFFF) * 2) - 1,
                ((rot_z/0xFFFF) * 2) - 1,
            )
            
            jointResult["rotation_keys"].append({
                "time": time,
                "x": rot_x * RAD_TO_DEG,
                "y": rot_y * RAD_TO_DEG,
                "z": rot_z * RAD_TO_DEG
            })
            
            offset = offset + 8
        
        num_pos_keys, = sAnimUInt32.unpack_from(data, offset)
        offset = offset + 4
        
        for x in range(num_pos_keys):
            time, pos_x, pos_y, pos_z = sAnimFrame.unpack_from(data, offset)
            jointResult["position_keys"].append({
                "time": time,
                "x": ((pos_x/0xFFFF)-0.5)*5,
                "y": ((pos_y/0xFFFF)-0.5)*5,
                "z": ((pos_z/0xFFFF)-0.5)*5
            })
            offset = offset + 8
        
        result["joints"].append(jointResult)
    
    num_constraints, = sAnimUInt32.unpack_from(data, offset)
    offset = offset + 4
    
    for i in range(num_constraints):
        chain_length, constraint_type, source_volume, source_offset_x, \
        source_offset_y, source_offset_z, target_volume, target_offset_x, \
        target_offset_y, target_offset_z, target_dir_x, target_dir_y, \
        target_dir_z, ease_in_start, ease_in_stop, ease_out_start, \
        ease_out_stop = sAnimConstraint.unpack_from(data, offset)
        offset = offset + 86
        
        result["constraints"].append({
            "chain_length": chain_length,
            "constraint_type": constraint_type,
            "source_volume": source_volume.split(b"\0",1)[0].decode(),
            "source_offset": [source_offset_x, source_offset_y, source_offset_z],
            "target_volume": target_volume.split(b"\0",1)[0].decode(),
            "target_offset": [target_offset_x, target_offset_y, target_offset_z],
            "target_dir": [target_dir_x, target_dir_y, target_dir_z],
            "ease_in_start": ease_in_start,
            "ease_in_stop": ease_in_stop,
            "ease_out_start": ease_out_start,
            "ease_out_stop": ease_out_stop
        })
        
    return result


def parseObj(data):
    result = b""
    result += sAnimHeader.pack(
        data["version"],
        data["sub_version"],
        data["base_priority"],
        data["duration"]
    )
    result += data["emote_name"].encode() + b"\0"
    result += sAnimParams.pack(
        data["loop_in_point"],
        data["loop_out_point"],
        data["loop"],
        data["ease_in_duration"],
        data["ease_out_duration"],
        data["hand_pose"],
        len(data["joints"])
    )
    
    for joint in data["joints"]:
        result += joint["name"].encode() + b"\0"
        
        result += sAnimUInt32.pack(joint["priority"])
        
        result += sAnimUInt32.pack(len(joint["rotation_keys"]))
        
        for rot_key in joint["rotation_keys"]:
            rot_x, rot_y, rot_z, rot_w = EulerToRot(
                rot_key["x"] * DEG_TO_RAD,
                rot_key["y"] * DEG_TO_RAD,
                rot_key["z"] * DEG_TO_RAD
            )
            
            mag = math.sqrt(rot_x * rot_x + rot_y * rot_y + rot_z * rot_z + rot_w * rot_w)
            
            if mag > 0.0000001:
                rot_x /= mag
                rot_y /= mag
                rot_z /= mag
                rot_w /= mag
            
            if rot_w < 0:
                rot_x = -rot_x
                rot_y = -rot_y
                rot_z = -rot_z
                rot_w = -rot_w
            
            #Might not be needed but do it anyway
            rot_x, rot_y, rot_z, rot_w = quantize16((rot_x, rot_y, rot_z, rot_w))
            
            result += sAnimFrame.pack(
                rot_key["time"],
                int(((rot_x + 1) / 2) * 0xFFFF),
                int(((rot_y + 1) / 2) * 0xFFFF),
                int(((rot_z + 1) / 2) * 0xFFFF)
            )
        
        result += sAnimUInt32.pack(len(joint["position_keys"]))
        
        for pos_key in joint["position_keys"]:
            pos_key["x"] = min(max(-1,pos_key["x"]),1)
            pos_key["y"] = min(max(-1,pos_key["y"]),1)
            pos_key["z"] = min(max(-1,pos_key["z"]),1)
            result += sAnimFrame.pack(
                pos_key["time"],
                int(((pos_key["x"]/5)+0.5)*0xFFFF),
                int(((pos_key["y"]/5)+0.5)*0xFFFF),
                int(((pos_key["z"]/5)+0.5)*0xFFFF)
            )
    
    result += sAnimUInt32.pack(len(data["constraints"]))
    
    for constraint in data["constraints"]:
        result += sAnimConstraint.pack(
            constraint["chain_length"],
            constraint["constraint_type"],
            (constraint["source_volume"].encode()+(b"\0"*16))[0:16],
            constraint["source_offset"][0],
            constraint["source_offset"][1],
            constraint["source_offset"][2],
            (constraint["target_volume"].encode()+(b"\0"*16))[0:16],
            constraint["target_offset"][0],
            constraint["target_offset"][1],
            constraint["target_offset"][2],
            constraint["target_dir"][0],
            constraint["target_dir"][1],
            constraint["target_dir"][2],
            constraint["ease_in_start"],
            constraint["ease_in_stop"],
            constraint["ease_out_start"],
            constraint["ease_out_stop"]
        )
    
    return result

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Dump Second Life .anim files to json because why not.')
    parser.add_argument('input', help='Input')
    parser.add_argument('output', help='Output')
    args = parser.parse_args()
    
    with open(args.input, "rb") as f:
        with open(args.output, "wb") as ff:
            inputFormat = args.input.lower().split(".")[-1]
            outputFormat = args.output.lower().split(".")[-1]
            if (inputFormat == "anim" or inputFormat == "animatn") and outputFormat == "json":
                ff.write(json.dumps(parseAnim(f.read()), sort_keys=True, indent=4, cls=CustomJsonEncoder).encode())
            elif inputFormat == "json" and (outputFormat == "anim" or outputFormat == "animatn"):
                ff.write(parseObj(json.loads(f.read().decode())))
            else:
                print("CHOOSE EITHER ANIM TO JSON OR JSON TO ANIM, NOT ANIM TO ANIM OR JSON TO JSON YOU DINGUS")
